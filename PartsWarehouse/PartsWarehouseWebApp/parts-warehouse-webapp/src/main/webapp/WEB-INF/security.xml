<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- Allows to use annotations @PreAuthorize and @P to secure application 
		 from performing operation by unauthorized users   -->
	<global-method-security pre-post-annotations="enabled" />


<!-- Using "use-expressions" gives more possibilities during "intercept-url configuration, and allows to use expresions".
	 In pair with securityTagLibs gives possibilities to configure security: hiding some menu options depends on user is authorized.-->
	<http use-expressions="true"> 
		<intercept-url pattern="/users**" access="hasRole('ROLE_ADMIN')"/>
		<intercept-url pattern="/users/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/my-warehouses**" access="hasRole('ROLE_USER')" />
		<intercept-url pattern="/user-parts-warehouse/**" access="hasRole('ROLE_USER')" />
		<form-login login-page="/login"/> <!-- redirect to login page -->
		<logout logout-url="/logout"/> 
	</http>

	<authentication-manager>
		<authentication-provider>
		
		<!-- Password is not visible while writing  -->
		<password-encoder hash="bcrypt"/>
					
		<!--  Dynamic download of data about the "user" from the Database  -->
		<!-- "jdbc-user-service"-  implementation, which allows to use authentication with data base -->
		<!-- "authorities-by-username-query" - query for ROLES of the user  -->
		<!-- "users-by-username-query" - Spring verifies if the given data is compatible with those retrieved from the database -->
			<jdbc-user-service data-source-ref="dataSource"
				authorities-by-username-query="select app_user.name, Role.name from app_user           
											   join app_user_Role on app_user.id = app_user_Role.users_id
											   join Role on app_user_Role.roles_id = Role.id
											   where app_user.name=?" 
				users-by-username-query= "select name, password, enabled from app_user where name=?" /> 
		</authentication-provider>
	</authentication-manager>
</beans:beans>