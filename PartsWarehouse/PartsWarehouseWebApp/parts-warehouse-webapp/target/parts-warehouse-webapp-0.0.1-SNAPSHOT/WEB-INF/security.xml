<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- Mozey uzywac annotations @PreAuthorize oraz @P zabezpieczajace aplikacje 
		 przed wykonywaniem operacji przez nieupowaznionyh uzytkownikow   -->
	<global-method-security pre-post-annotations="enabled" />

<!-- Doajemy formularz logowania, operacje wylogowywania, mozliwosc uwierzytlninia za pomoca naglowkow HTTP -->

<!-- Uzycie - "use-expressions" daje wiecej mozliwosci konfiguracji przy "intercept-url, oraz korzystania z expresions",
	 Razem securityTagLibs daje nam mozlowisc konfiguracji security np: chowania opcji w mennu w zaleznosci czy jestes zalogowany 
	 lub jaki masz profil dostepu (ROLE_ADMIN, ROLE_USER) -->
	<http use-expressions="true"> 
	<!-- Adres przechwytujacy i przekierywujacy na strone do logowania jest pierwszy ma priorytet - gdy klikniemy na zakladke "Users" -->
		<intercept-url pattern="/users**" access="hasRole('ROLE_ADMIN')"/>
		<intercept-url pattern="/users/**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/my-warehouses**" access="hasRole('ROLE_USER')" />
		<intercept-url pattern="/user-parts-warehouse/**" access="hasRole('ROLE_USER')" />
		<form-login login-page="/login"/> <!-- przekierowanie na strone z formularzem do logowania -->
		<logout logout-url="/logout"/> <!-- wylogowywanie -->
	</http>

	<authentication-manager>
		<authentication-provider>
		
		<!-- Haslo nie bedzie widoczne przy wpisywaniu -->
		<password-encoder hash="bcrypt"/>
					
		<!--Dynamiczne pobieranie danych na temat "usera" z BazyDanych  -->
		<!-- "jdbc-user-service"- gotowa implementacja, która pozwala obsługiwać uwierzytelnianie z użyciem bazy danych ustawiając
			  jedynie kilka niezbędnych atrybutów -->
		<!-- "authorities-by-username-query" - zapytanie ktore dla okreslonego uzytkownika pobiera nam liste rol ktore on posiada -->
		<!-- "users-by-username-query" - Spring weryfikuje czy podane dane sa zgodne z tymi pobrnymi z bazy danych -->
			<jdbc-user-service data-source-ref="dataSource"
				authorities-by-username-query="select app_user.name, Role.name from app_user           
											   join app_user_Role on app_user.id = app_user_Role.users_id
											   join Role on app_user_Role.roles_id = Role.id
											   where app_user.name=?" 
				users-by-username-query= "select name, password, enabled from app_user where name=?" /> 
		</authentication-provider>
	</authentication-manager>


</beans:beans>